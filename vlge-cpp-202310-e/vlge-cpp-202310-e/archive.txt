/*
Copyright 2023 Violetta & Lappy - hoanglongplanner

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//https://gafferongames.com/post/fix_your_timestep/
//https://learnopengl.com/code_viewer_gh.php?code=src/1.getting_started/1.2.hello_window_clear/hello_window_clear.cpp
//https://stackoverflow.com/questions/45880238/how-to-draw-while-resizing-glfw-window

//#include <string>
//#include <iostream>
//#include <filesystem>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <imgui/imgui.h>
#include <imgui/imgui_internal.h>
#include <imgui/imgui_impl_glfw.h>
#include <imgui/imgui_impl_opengl3.h>

#include <fmt/format.h>

#include <engine/ProgramConfig.h>
#include <engine/Program.h>
#include <ae/KExitCode.h>

class KGraphicApi {
public:
	static const int K_OpenGL = 0;
	static const int K_Vulkan = 1;
	static const int K_WebGPU = 2;
};

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

float highDPIscaleFactor = 1.0;
const std::string K_FontName = "IBMPlexSans-Regular.ttf";

void processInput(GLFWwindow* window);
void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void draw(GLFWwindow* window);
bool initImgui(GLFWwindow* arg_window);

void processInput(GLFWwindow* window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
		glfwSetWindowShouldClose(window, true);
	}
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
	glViewport(0, 0, width, height);

	//while resize, render screen to not look sloppy
	//NOTE: NOT IMPLEMENTED FOR PERFORMANCE REASON
	//- INCREASE PROCESS MEMORY 200+mb
	//- RESULT IN BLACK LINE, if not implemented
	//draw(window);
}

void draw(GLFWwindow* window) {
	//--render--
	glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);

	//--glfw: swap buffers--
	glfwSwapBuffers(window);
}

bool initImgui(GLFWwindow* arg_window) {
	IMGUI_CHECKVERSION();
	ImGui::CreateContext();

	ImGuiIO& io = ImGui::GetIO();
	(void)io;

	/*io.Fonts->AddFontFromFileTTF(
		K_FontName.c_str(),
		24.0f * highDPIscaleFactor,
		NULL,
		NULL
	);*/
	//setImGuiStyle(highDPIscaleFactor);

	// setup platform/renderer bindings
	if (!ImGui_ImplGlfw_InitForOpenGL(arg_window, true)) {
		return false;
	}
	if (!ImGui_ImplOpenGL3_Init()) {
		return false;
	}

	return true;
}

void MainTerminate(GLFWwindow* arg_window) {
	ImGui_ImplOpenGL3_Shutdown();
	ImGui_ImplGlfw_Shutdown();
	ImGui::DestroyContext();
	if (arg_window != NULL) {
		glfwDestroyWindow(arg_window);
	}
	glfwTerminate();
}

void composeDearImGuiFrame(GLFWwindow* arg_window) {
	ImGui_ImplOpenGL3_NewFrame();
	ImGui_ImplGlfw_NewFrame();

	ImGui::NewFrame();

	bool open = true;
	if (open) {
		ImGui::ShowDemoWindow(&open);
	}

	// a window is defined by Begin/End pair
	{
		int glfw_width = 0, glfw_height = 0, controls_width = 0;
		// get the window size as a base for calculating widgets geometry
		glfwGetFramebufferSize(arg_window, &glfw_width, &glfw_height);
		controls_width = glfw_width;
		// make controls widget width to be 1/3 of the main window width
		if ((controls_width /= 3) < 300) {
			controls_width = 300;
		}

		// position the controls widget in the top-right corner with some margin
		ImGui::SetNextWindowPos(ImVec2(10, 10), ImGuiCond_Always);
		// here we set the calculated width and also make the height to be
		// be the height of the main window also with some margin
		ImGui::SetNextWindowSize(
			ImVec2(static_cast<float>(controls_width), static_cast<float>(glfw_height - 20)),
			ImGuiCond_Always
		);

		ImGui::SetNextWindowBgAlpha(0.7f);
		// create a window and append into it
		ImGui::Begin("Controls", NULL, ImGuiWindowFlags_NoResize);		

		ImGui::Dummy(ImVec2(0.0f, 3.0f));
		ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "Application");
		ImGui::Text("Main window width: %d", glfw_width);
		ImGui::Text("Main window height: %d", glfw_height);

		ImGui::Dummy(ImVec2(0.0f, 3.0f));
		ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "GLFW");
		ImGui::Text("%s", glfwGetVersionString());

		ImGui::Dummy(ImVec2(0.0f, 3.0f));
		ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "Dear ImGui");
		ImGui::Text("%s", IMGUI_VERSION);

		ImGui::Dummy(ImVec2(0.0f, 10.0f));
		ImGui::Separator();
		ImGui::Dummy(ImVec2(0.0f, 10.0f));		

		ImGui::End();
	}
}

int main(int argc, char* argv[]) {

	int tech = 0;

	switch (tech) {
		case KGraphicApi::K_OpenGL:
			{
				fmt::println("OpenGL choose. Opening context !!");
			}
			break;
		case KGraphicApi::K_Vulkan:
			{
				fmt::println("Vulkan choose. Opening context !!");
			}
			break;
		case KGraphicApi::K_WebGPU:
			{
				fmt::println("WebGPU choose. Opening context !!");
			}
			break;
		default:
			{
				fmt::println("None choose. Applicaton exit !!");
			}
			break;
	}

	//--glfw: initialize and configure--	
	if (!glfwInit()) {
		fmt::println("[ERROR] Couldn't initialize GLFW");
		return KExitCode::K_Fail;
	}
	else {
		fmt::println("[INFO] GLFW initialized");
	}

	//Something
	glfwWindowHint(GLFW_DOUBLEBUFFER, 1);
	glfwWindowHint(GLFW_DEPTH_BITS, 24);
	glfwWindowHint(GLFW_STENCIL_BITS, 8);

	//use OpenGL version 3.3 
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	//use core functionality only 
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

	//--glfw window creation--
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "ViolettaLappy-ProgramEngine", NULL, NULL);
	if (window == NULL) {
		fmt::println("Failed to create GLFW window");
		glfwTerminate();
		return -1;
	}

	glfwSetWindowSizeLimits(
		window,
		GLFW_DONT_CARE,
		GLFW_DONT_CARE,
		static_cast<int>(1280 * highDPIscaleFactor),
		static_cast<int>(720 * highDPIscaleFactor)
	);

	//Vsync
	glfwSwapInterval(1);

	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	//--glad: load all OpenGL function pointers--
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		fmt::println("Failed to initialize GLAD");
		return -1;
	}

	//--imgui: init--
	if (!initImgui(window)) {
		fmt::println("[ERROR] Dear ImGui initialization failed");
		return KExitCode::K_Fail;
	}

	//--loop--
	while (!glfwWindowShouldClose(window)) {
		//--input--
		processInput(window);

		//--render--
		//imgui
		composeDearImGuiFrame(window);
		ImGui::Render();
		ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
		//program
		draw(window);

		//--glfw: poll IO events (keys pressed/released, mouse moved etc.)--        
		glfwPollEvents();
	}

	//--glfw: terminate, clearing all previously allocated GLFW resources.--
	MainTerminate(window);

	return KExitCode::K_Success;
}



